generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AttemptedQuestion {
  id                 Int    @id @default(autoincrement())
  userId             String @map("user_id")
  topicId            Int    @map("topic_id")
  questionsAttempted Int    @default(0) @map("questions_attempted")
  topic              Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model Comment {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  username   String?
  questionId Int      @map("question_id")
  comment    String
  createdAt  DateTime @default(now()) @map("created_at")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  replies    Reply[]
}

model Question {
  id               Int              @id @default(autoincrement())
  topicId          Int              @map("topic_id")
  questionText     String           @map("question_text")
  options          String[]
  correctOptionIdx Int              @map("correct_option_index")
  explanation      String?
  comments         Comment[]
  topic            Topic            @relation(fields: [topicId], references: [id], onDelete: Cascade)
  solvedQuestions  SolvedQuestion[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  username  String
  commentId Int      @map("comment_id")
  reply     String
  upvote    Int      @default(0)
  downvote  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model SolvedQuestion {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  questionId Int      @map("question_id")
  isCorrect  Boolean  @map("is_correct")
  solvedAt   DateTime @default(now()) @map("solved_at")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Subject {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  topics Topic[]
}

model Subscription {
  id           Int      @id @default(autoincrement())
  userId       String   @map("user_id")
  status       String
  duration     Int
  subscribedAt DateTime @default(now()) @map("subscribed_at")
}

model Topic {
  id                 Int                 @id @default(autoincrement())
  name               String
  noOfQuestions      Int                 @default(0) @map("no_of_questions")
  subjectId          Int                 @map("subject_id")
  attemptedQuestions AttemptedQuestion[]
  questions          Question[]
  subject            Subject             @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}
