generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AttemptedQuestion {
  id                 Int    @id @default(autoincrement())
  userId             String @map("user_id")
  topicId            Int    @map("topic_id")
  questionsAttempted Int    @default(0) @map("questions_attempted")
  topic              Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model Comment {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  username   String?
  questionId Int      @map("question_id")
  comment    String
  createdAt  DateTime @default(now()) @map("created_at")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  replies    Reply[]
}

model Question {
  id               Int              @id @default(autoincrement())
  topicId          Int              @map("topic_id")
  questionText     String           @map("question_text")
  options          String[]
  correctOptionIdx Int              @map("correct_option_index")
  explanation      String?
  difficulty       String?
  tags             String[]
  deletedAt        DateTime?        @map("deleted_at")
  deletedBy        String?          @map("deleted_by")
  comments         Comment[]
  topic            Topic            @relation(fields: [topicId], references: [id], onDelete: Cascade)
  solvedQuestions  SolvedQuestion[]
  flags            QuestionFlag[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  username  String
  commentId Int      @map("comment_id")
  reply     String
  upvote    Int      @default(0)
  downvote  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model SolvedQuestion {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  questionId Int      @map("question_id")
  isCorrect  Boolean  @map("is_correct")
  solvedAt   DateTime @default(now()) @map("solved_at")
  mode       String   @default("practice")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Subject {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  deletedAt DateTime? @map("deleted_at")
  deletedBy String?   @map("deleted_by")
  topics    Topic[]
}

model Refund {
  id              Int      @id @default(autoincrement())
  stripeRefundId  String   @unique @map("stripe_refund_id")
  stripePaymentId String   @map("stripe_payment_id")
  userId          String?  @map("user_id")
  amount          Float
  reason          String
  status          String
  subscriptionId  Int?     @map("subscription_id")
  createdAt       DateTime @default(now()) @map("created_at")
  processedBy     String?  @map("processed_by")
}

model Subscription {
  id                   Int       @id @default(autoincrement())
  userId               String    @map("user_id")
  status               String // active, canceled, past_due, trialing, etc.
  duration             Int // in months (6 or 12)
  stripeCustomerId     String    @map("stripe_customer_id")
  stripeSubscriptionId String    @unique @map("stripe_subscription_id")
  stripePriceId        String    @map("stripe_price_id")
  stripeProductId      String?   @map("stripe_product_id")
  subscribedAt         DateTime  @default(now()) @map("subscribed_at")
  currentPeriodEnd     DateTime  @map("current_period_end")
  cancelAtPeriodEnd    Boolean   @default(false) @map("cancel_at_period_end")
  trialEnd             DateTime? @map("trial_end")
  nextBillingDate      DateTime? @map("next_billing_date")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  @@index([userId])
  @@index([status])
  @@index([stripeCustomerId])
  @@index([currentPeriodEnd])
}

model Topic {
  id                 Int                 @id @default(autoincrement())
  name               String
  noOfQuestions      Int                 @default(0) @map("no_of_questions")
  subjectId          Int                 @map("subject_id")
  deletedAt          DateTime?           @map("deleted_at")
  deletedBy          String?             @map("deleted_by")
  attemptedQuestions AttemptedQuestion[]
  questions          Question[]
  subject            Subject             @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}

model Announcement {
  id         Int                @id @default(autoincrement())
  title      String
  content    String
  type       String             @default("info") // info, warning, success, error
  priority   String             @default("medium") // low, medium, high, urgent
  isActive   Boolean            @default(true) @map("is_active")
  targetRole String             @default("all") @map("target_role") // all, student, admin
  startDate  DateTime?          @map("start_date")
  endDate    DateTime?          @map("end_date")
  createdBy  String             @map("created_by") // admin user ID
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime           @updatedAt @map("updated_at")
  readBy     AnnouncementRead[]
}

model AnnouncementRead {
  id             Int          @id @default(autoincrement())
  userId         String       @map("user_id")
  announcementId Int          @map("announcement_id")
  readAt         DateTime     @default(now()) @map("read_at")
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([userId, announcementId])
}

model AdminActivityLog {
  id         Int      @id @default(autoincrement())
  adminId    String   @map("admin_id") // ID of the admin who performed the action
  adminName  String   @map("admin_name") // Name of the admin for quick reference
  action     String // Action type (e.g., "user_created", "user_deleted", "announcement_created")
  resource   String // Resource type (e.g., "user", "announcement", "subscription")
  resourceId String?  @map("resource_id") // ID of the affected resource
  details    Json? // Additional details about the action (JSON format)
  ipAddress  String?  @map("ip_address") // IP address of the admin
  userAgent  String?  @map("user_agent") // Browser/user agent information
  timestamp  DateTime @default(now())

  @@index([adminId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
}

model QuestionFlag {
  id         Int       @id @default(autoincrement())
  questionId Int       @map("question_id")
  userId     String    @map("user_id")
  username   String? // Store username for quick reference
  reason     String // Reason for flagging (inappropriate, incorrect, unclear, etc.)
  details    String? // Additional details from user
  status     String    @default("pending") // pending, reviewed, dismissed, resolved
  createdAt  DateTime  @default(now()) @map("created_at")
  reviewedAt DateTime? @map("reviewed_at")
  reviewedBy String?   @map("reviewed_by") // Admin ID who reviewed
  adminNotes String?   @map("admin_notes") // Admin notes on the flag
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, userId]) // Prevent duplicate flags from same user for same question
  @@index([questionId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model TestSession {
  id             Int       @id @default(autoincrement())
  userId         String    @map("user_id")
  sessionId      String    @unique @map("session_id") // Unique identifier for the test session
  testType       String    @map("test_type") // timed, untimed, practice
  questionIds    Json      @map("question_ids") // Array of question IDs in the test
  startedAt      DateTime  @default(now()) @map("started_at")
  completedAt    DateTime? @map("completed_at")
  score          Int       @default(0)
  totalQuestions Int       @default(0) @map("total_questions")
  correctCount   Int       @default(0) @map("correct_count")
  incorrectCount Int       @default(0) @map("incorrect_count")
  status         String    @default("active") // active, completed, abandoned
  retestCount    Int       @default(0) @map("retest_count") // Number of times this session was retaken
  topicStats     Json?     @map("topic_stats") // per-topic { [topicId]: { correct, wrong, total } }

  @@index([userId])
  @@index([sessionId])
  @@index([status])
  @@index([startedAt])
}

model SiteSettings {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String? // Store JSON or string values
  type        String   @default("string") // string, json, base64, boolean
  description String?
  updatedBy   String?  @map("updated_by") // Admin ID who updated
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([key])
}

model Feedback {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  questionId Int?     @map("question_id")
  type       String // 'report' or 'general'
  feedback   String
  screenshot String?
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([questionId])
  @@index([type])
  @@index([createdAt])
}

model StudyPlan {
  id              Int      @id @default(autoincrement())
  userId          String   @map("user_id")
  planType        String   @map("plan_type") // '25-day', '50-day', 'custom'
  totalDays       Int      @map("total_days")
  totalQuestions  Int      @map("total_questions")
  questionsPerDay Int      @map("questions_per_day")
  startDate       DateTime @map("start_date")
  endDate         DateTime @map("end_date")
  status          String   @default("active") // 'active', 'paused', 'completed', 'cancelled'
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  dailyProgress DailyProgress[]

  @@index([userId])
  @@index([status])
  @@index([startDate])
}

model DailyProgress {
  id                 Int      @id @default(autoincrement())
  userId             String   @map("user_id")
  planId             Int      @map("plan_id")
  date               DateTime @map("date")
  questionsCompleted Int      @default(0) @map("questions_completed")
  questionsTarget    Int      @map("questions_target")
  accuracy           Float    @default(0.0)
  timeSpent          Int      @default(0) @map("time_spent") // in minutes
  streak             Int      @default(0)
  createdAt          DateTime @default(now()) @map("created_at")

  plan StudyPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([userId, planId, date])
  @@index([userId])
  @@index([planId])
  @@index([date])
}

model Achievement {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  type        String // 'plan_completion', 'streak', 'accuracy', 'questions_milestone'
  title       String
  description String
  icon        String? // emoji or icon name
  earnedAt    DateTime @default(now()) @map("earned_at")
  metadata    Json? // additional data like streak count, accuracy percentage, etc.

  @@index([userId])
  @@index([type])
  @@index([earnedAt])
}

model Settings {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedBy   String?  @map("updated_by")

  @@index([key])
}

model UserRetakeLimit {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  maxRetakes Int      @default(-1) @map("max_retakes") // -1 means unlimited
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([userId])
  @@index([userId])
}

model UserStudyMaterialPermission {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  canDownload Boolean  @default(false) @map("can_download")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([userId])
  @@index([userId])
}

model FreeTrialSettings {
  id                 Int      @id @default(autoincrement())
  dailyQuestionLimit Int      @default(5) @map("daily_question_limit")
  allowedTopics      Int[]    @default([]) @map("allowed_topics") // Array of topic IDs
  isActive           Boolean  @default(true) @map("is_active")
  description        String?  @default("Free trial allows limited daily questions from selected topics")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  updatedBy          String?  @map("updated_by") // Admin who updated the settings

  @@index([isActive])
}

model UserFreeTrialUsage {
  id            Int      @id @default(autoincrement())
  userId        String   @map("user_id")
  date          DateTime @map("date") // Date of usage (YYYY-MM-DD)
  questionsUsed Int      @default(0) @map("questions_used")
  topicId       Int      @map("topic_id") // Topic used on this date
  createdAt     DateTime @default(now()) @map("created_at")

  @@unique([userId, date, topicId])
  @@index([userId])
  @@index([date])
  @@index([topicId])
}
