generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AttemptedQuestion {
  id                 Int    @id @default(autoincrement())
  userId             String @map("user_id")
  topicId            Int    @map("topic_id")
  questionsAttempted Int    @default(0) @map("questions_attempted")
  topic              Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model Comment {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  username   String?
  questionId Int      @map("question_id")
  comment    String
  createdAt  DateTime @default(now()) @map("created_at")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  replies    Reply[]
}

model Question {
  id               Int              @id @default(autoincrement())
  topicId          Int              @map("topic_id")
  questionText     String           @map("question_text")
  options          String[]
  correctOptionIdx Int              @map("correct_option_index")
  explanation      String?
  difficulty       String?
  tags             String[]
  deletedAt        DateTime?        @map("deleted_at")
  deletedBy        String?          @map("deleted_by")
  comments         Comment[]
  topic            Topic            @relation(fields: [topicId], references: [id], onDelete: Cascade)
  solvedQuestions  SolvedQuestion[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  username  String
  commentId Int      @map("comment_id")
  reply     String
  upvote    Int      @default(0)
  downvote  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model SolvedQuestion {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  questionId Int      @map("question_id")
  isCorrect  Boolean  @map("is_correct")
  solvedAt   DateTime @default(now()) @map("solved_at")
  mode       String   @default("practice")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Subject {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  deletedAt DateTime? @map("deleted_at")
  deletedBy String?   @map("deleted_by")
  topics    Topic[]
}

model Refund {
  id              Int      @id @default(autoincrement())
  stripeRefundId  String   @unique @map("stripe_refund_id")
  stripePaymentId String   @map("stripe_payment_id")
  userId          String?  @map("user_id")
  amount          Float
  reason          String
  status          String
  subscriptionId  Int?     @map("subscription_id")
  createdAt       DateTime @default(now()) @map("created_at")
  processedBy     String?  @map("processed_by")
}

model Subscription {
  id           Int      @id @default(autoincrement())
  userId       String   @map("user_id")
  status       String
  duration     Int
  subscribedAt DateTime @default(now()) @map("subscribed_at")
}

model Topic {
  id                 Int                 @id @default(autoincrement())
  name               String
  noOfQuestions      Int                 @default(0) @map("no_of_questions")
  subjectId          Int                 @map("subject_id")
  deletedAt          DateTime?           @map("deleted_at")
  deletedBy          String?             @map("deleted_by")
  attemptedQuestions AttemptedQuestion[]
  questions          Question[]
  subject            Subject             @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}

model Announcement {
  id         Int                @id @default(autoincrement())
  title      String
  content    String
  type       String             @default("info") // info, warning, success, error
  priority   String             @default("medium") // low, medium, high, urgent
  isActive   Boolean            @default(true) @map("is_active")
  targetRole String             @default("all") @map("target_role") // all, student, admin
  startDate  DateTime?          @map("start_date")
  endDate    DateTime?          @map("end_date")
  createdBy  String             @map("created_by") // admin user ID
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime           @updatedAt @map("updated_at")
  readBy     AnnouncementRead[]
}

model AnnouncementRead {
  id             Int          @id @default(autoincrement())
  userId         String       @map("user_id")
  announcementId Int          @map("announcement_id")
  readAt         DateTime     @default(now()) @map("read_at")
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([userId, announcementId])
}

model AdminActivityLog {
  id         Int      @id @default(autoincrement())
  adminId    String   @map("admin_id") // ID of the admin who performed the action
  adminName  String   @map("admin_name") // Name of the admin for quick reference
  action     String // Action type (e.g., "user_created", "user_deleted", "announcement_created")
  resource   String // Resource type (e.g., "user", "announcement", "subscription")
  resourceId String?  @map("resource_id") // ID of the affected resource
  details    Json? // Additional details about the action (JSON format)
  ipAddress  String?  @map("ip_address") // IP address of the admin
  userAgent  String?  @map("user_agent") // Browser/user agent information
  timestamp  DateTime @default(now())

  @@index([adminId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
}
